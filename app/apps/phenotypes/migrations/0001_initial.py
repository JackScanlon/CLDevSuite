# Generated by Django 4.1.3 on 2022-11-30 16:15

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.ranges
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('concepts', '0001_initial'),
        ('codelist', '0001_initial'),
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('organisation', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='PhenotypeType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=250, unique=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='PhenotypeDraft',
            fields=[
                ('id', models.CharField(editable=False, max_length=50, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=250)),
                ('data', models.JSONField(blank=True, null=True)),
                ('brand', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_phenotype_draft_brand', to='core.brand')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='phenotype_draft_creator', to=settings.AUTH_USER_MODEL)),
                ('organisation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='phenotype_draft_organisation', to='organisation.organisation')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='phenotype_draft_owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Phenotype',
            fields=[
                ('id', models.CharField(editable=False, max_length=50, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now_add=True)),
                ('uuid', models.CharField(blank=True, max_length=250, null=True)),
                ('phenoflowid', models.CharField(blank=True, max_length=100, null=True)),
                ('name', models.CharField(max_length=250)),
                ('valid_date_range', django.contrib.postgres.fields.ranges.DateTimeRangeField()),
                ('author', models.CharField(max_length=1000)),
                ('sex', models.IntegerField(choices=[(1, 'Male/Female'), (2, 'Male'), (3, 'Female')], default=1)),
                ('description', models.TextField(blank=True, null=True)),
                ('implementation', models.TextField(blank=True, null=True)),
                ('source_reference', models.CharField(blank=True, max_length=250, null=True)),
                ('citation_requirements', models.CharField(blank=True, max_length=250, null=True)),
                ('is_published', models.BooleanField(default=False, null=True)),
                ('primary_publication', models.IntegerField(blank=True, null=True)),
                ('publication_urls', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), blank=True, null=True, size=None)),
                ('validation_performed', models.BooleanField(default=False, null=True)),
                ('validation', models.TextField(blank=True, null=True)),
                ('brand', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_phenotype_brand', to='core.brand')),
                ('collections', models.ManyToManyField(blank=True, related_name='related_collections', to='core.collection')),
                ('concepts', models.ManyToManyField(blank=True, related_name='related_concepts', to='concepts.concept')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='phenotype_creator', to=settings.AUTH_USER_MODEL)),
                ('data_sources', models.ManyToManyField(blank=True, related_name='related_data_sources', to='core.datasource')),
                ('organisation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='phenotypes_organisation', to='organisation.organisation')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='phenotypes_owner', to=settings.AUTH_USER_MODEL)),
                ('status', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='phenotype_publication_status', to='core.publicationstatus')),
                ('tags', models.ManyToManyField(blank=True, related_name='related_tags', to='core.tag')),
                ('terminology', models.ManyToManyField(blank=True, related_name='related_concepts_coding_systems', to='codelist.codingsystem')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_type', to='phenotypes.phenotypetype')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='phenotype_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('name',),
                'permissions': (('can_approve', 'Can approve phenotype'),),
            },
        ),
        migrations.CreateModel(
            name='HistoricalPhenotype',
            fields=[
                ('id', models.CharField(db_index=True, editable=False, max_length=50)),
                ('created', models.DateTimeField(blank=True, editable=False)),
                ('updated', models.DateTimeField(blank=True, editable=False)),
                ('uuid', models.CharField(blank=True, max_length=250, null=True)),
                ('phenoflowid', models.CharField(blank=True, max_length=100, null=True)),
                ('name', models.CharField(max_length=250)),
                ('valid_date_range', django.contrib.postgres.fields.ranges.DateTimeRangeField()),
                ('author', models.CharField(max_length=1000)),
                ('sex', models.IntegerField(choices=[(1, 'Male/Female'), (2, 'Male'), (3, 'Female')], default=1)),
                ('description', models.TextField(blank=True, null=True)),
                ('implementation', models.TextField(blank=True, null=True)),
                ('source_reference', models.CharField(blank=True, max_length=250, null=True)),
                ('citation_requirements', models.CharField(blank=True, max_length=250, null=True)),
                ('is_published', models.BooleanField(default=False, null=True)),
                ('primary_publication', models.IntegerField(blank=True, null=True)),
                ('publication_urls', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), blank=True, null=True, size=None)),
                ('validation_performed', models.BooleanField(default=False, null=True)),
                ('validation', models.TextField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('brand', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.brand')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('organisation', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='organisation.organisation')),
                ('owner', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('status', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.publicationstatus')),
                ('type', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='phenotypes.phenotypetype')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical phenotype',
                'verbose_name_plural': 'historical phenotypes',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
